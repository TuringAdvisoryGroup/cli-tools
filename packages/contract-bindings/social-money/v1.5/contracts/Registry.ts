/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "approveProposal(bytes32,address)": FunctionFragment;
    "creatorReferral(bytes32)": FunctionFragment;
    "getCreatorByIndex(bytes32)": FunctionFragment;
    "getCreatorByName(string)": FunctionFragment;
    "getCreatorBySymbol(string)": FunctionFragment;
    "getCreatorReferralByIndex(bytes32)": FunctionFragment;
    "getIndexByName(string)": FunctionFragment;
    "getIndexBySymbol(string)": FunctionFragment;
    "importByIndex(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "legacyProposals(string)": FunctionFragment;
    "legacyProposalsByIndex(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rolodex(bytes32)": FunctionFragment;
    "setLegacyRegistryAddress(address)": FunctionFragment;
    "submitProposal(string,string,uint8,uint256,uint8,uint256,address,address,uint8)": FunctionFragment;
    "submitProposalReferral(bytes32,address,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveProposal"
      | "creatorReferral"
      | "getCreatorByIndex"
      | "getCreatorByName"
      | "getCreatorBySymbol"
      | "getCreatorReferralByIndex"
      | "getIndexByName"
      | "getIndexBySymbol"
      | "importByIndex"
      | "initialize"
      | "legacyProposals"
      | "legacyProposalsByIndex"
      | "owner"
      | "renounceOwnership"
      | "rolodex"
      | "setLegacyRegistryAddress"
      | "submitProposal"
      | "submitProposalReferral"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorReferral",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorByIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorBySymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorReferralByIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexBySymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "importByIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "legacyProposals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyProposalsByIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rolodex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLegacyRegistryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposalReferral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorReferralByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacyProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyProposalsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rolodex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLegacyRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposalReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogProposalApprove(string,address)": EventFragment;
    "LogProposalImported(string,string,address,bytes32)": EventFragment;
    "LogProposalReferralSubmit(address,uint8,bytes32)": EventFragment;
    "LogProposalSubmit(string,string,address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogProposalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProposalImported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProposalReferralSubmit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProposalSubmit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogProposalApproveEventObject {
  name: string;
  tokenAddress: string;
}
export type LogProposalApproveEvent = TypedEvent<
  [string, string],
  LogProposalApproveEventObject
>;

export type LogProposalApproveEventFilter =
  TypedEventFilter<LogProposalApproveEvent>;

export interface LogProposalImportedEventObject {
  name: string;
  symbol: string;
  proposer: string;
  hashIndex: string;
}
export type LogProposalImportedEvent = TypedEvent<
  [string, string, string, string],
  LogProposalImportedEventObject
>;

export type LogProposalImportedEventFilter =
  TypedEventFilter<LogProposalImportedEvent>;

export interface LogProposalReferralSubmitEventObject {
  referral: string;
  referralPercentage: number;
  hashIndex: string;
}
export type LogProposalReferralSubmitEvent = TypedEvent<
  [string, number, string],
  LogProposalReferralSubmitEventObject
>;

export type LogProposalReferralSubmitEventFilter =
  TypedEventFilter<LogProposalReferralSubmitEvent>;

export interface LogProposalSubmitEventObject {
  name: string;
  symbol: string;
  proposer: string;
  hashIndex: string;
}
export type LogProposalSubmitEvent = TypedEvent<
  [string, string, string, string],
  LogProposalSubmitEventObject
>;

export type LogProposalSubmitEventFilter =
  TypedEventFilter<LogProposalSubmitEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorReferral(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { referral: string; referralPercentage: number }
    >;

    getCreatorByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          token: string;
          name: string;
          symbol: string;
          totalSupply: BigNumber;
          vestingPeriodInDays: BigNumber;
          proposer: string;
          vestingBeneficiary: string;
          initialPlatformPercentage: number;
          decimals: number;
          initialPercentage: number;
          approved: boolean;
        }
      ]
    >;

    getCreatorByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          token: string;
          name: string;
          symbol: string;
          totalSupply: BigNumber;
          vestingPeriodInDays: BigNumber;
          proposer: string;
          vestingBeneficiary: string;
          initialPlatformPercentage: number;
          decimals: number;
          initialPercentage: number;
          approved: boolean;
        }
      ]
    >;

    getCreatorBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          token: string;
          name: string;
          symbol: string;
          totalSupply: BigNumber;
          vestingPeriodInDays: BigNumber;
          proposer: string;
          vestingBeneficiary: string;
          initialPlatformPercentage: number;
          decimals: number;
          initialPercentage: number;
          approved: boolean;
        }
      ]
    >;

    getCreatorReferralByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [[string, number] & { referral: string; referralPercentage: number }]
    >;

    getIndexByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIndexBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    importByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      _oldRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    legacyProposals(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          token: string;
          name: string;
          symbol: string;
          totalSupply: BigNumber;
          vestingPeriodInDays: BigNumber;
          proposer: string;
          vestingBeneficiary: string;
          initialPlatformPercentage: number;
          decimals: number;
          initialPercentage: number;
          approved: boolean;
        }
      ]
    >;

    legacyProposalsByIndex(
      hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          token: string;
          name: string;
          symbol: string;
          totalSupply: BigNumber;
          vestingPeriodInDays: BigNumber;
          proposer: string;
          vestingBeneficiary: string;
          initialPlatformPercentage: number;
          decimals: number;
          initialPercentage: number;
          approved: boolean;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    setLegacyRegistryAddress(
      _legacyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _proposer: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposalReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveProposal(
    _hashIndex: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorReferral(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number] & { referral: string; referralPercentage: number }
  >;

  getCreatorByIndex(
    _hashIndex: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  getCreatorByName(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  getCreatorBySymbol(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  getCreatorReferralByIndex(
    _hashIndex: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number] & { referral: string; referralPercentage: number }
  >;

  getIndexByName(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getIndexBySymbol(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  importByIndex(
    _hashIndex: PromiseOrValue<BytesLike>,
    _oldRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  legacyProposals(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  legacyProposalsByIndex(
    hashIndex: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rolodex(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      totalSupply: BigNumber;
      vestingPeriodInDays: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPlatformPercentage: number;
      decimals: number;
      initialPercentage: number;
      approved: boolean;
    }
  >;

  setLegacyRegistryAddress(
    _legacyRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    _initialPercentage: PromiseOrValue<BigNumberish>,
    _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
    _vestingBeneficiary: PromiseOrValue<string>,
    _proposer: PromiseOrValue<string>,
    _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposalReferral(
    _hashIndex: PromiseOrValue<BytesLike>,
    _referral: PromiseOrValue<string>,
    _referralPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creatorReferral(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { referral: string; referralPercentage: number }
    >;

    getCreatorByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    getCreatorByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    getCreatorBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    getCreatorReferralByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { referral: string; referralPercentage: number }
    >;

    getIndexByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getIndexBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    importByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      _oldRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    legacyProposals(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    legacyProposalsByIndex(
      hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        totalSupply: BigNumber;
        vestingPeriodInDays: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPlatformPercentage: number;
        decimals: number;
        initialPercentage: number;
        approved: boolean;
      }
    >;

    setLegacyRegistryAddress(
      _legacyRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _proposer: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitProposalReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogProposalApprove(string,address)"(
      name?: null,
      tokenAddress?: PromiseOrValue<string> | null
    ): LogProposalApproveEventFilter;
    LogProposalApprove(
      name?: null,
      tokenAddress?: PromiseOrValue<string> | null
    ): LogProposalApproveEventFilter;

    "LogProposalImported(string,string,address,bytes32)"(
      name?: null,
      symbol?: null,
      proposer?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalImportedEventFilter;
    LogProposalImported(
      name?: null,
      symbol?: null,
      proposer?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalImportedEventFilter;

    "LogProposalReferralSubmit(address,uint8,bytes32)"(
      referral?: null,
      referralPercentage?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalReferralSubmitEventFilter;
    LogProposalReferralSubmit(
      referral?: null,
      referralPercentage?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalReferralSubmitEventFilter;

    "LogProposalSubmit(string,string,address,bytes32)"(
      name?: null,
      symbol?: null,
      proposer?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalSubmitEventFilter;
    LogProposalSubmit(
      name?: null,
      symbol?: null,
      proposer?: null,
      hashIndex?: PromiseOrValue<BytesLike> | null
    ): LogProposalSubmitEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorReferral(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorReferralByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    importByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      _oldRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    legacyProposals(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    legacyProposalsByIndex(
      hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLegacyRegistryAddress(
      _legacyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _proposer: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposalReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorReferral(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorReferralByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexBySymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importByIndex(
      _hashIndex: PromiseOrValue<BytesLike>,
      _oldRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    legacyProposals(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacyProposalsByIndex(
      hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLegacyRegistryAddress(
      _legacyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _proposer: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposalReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
