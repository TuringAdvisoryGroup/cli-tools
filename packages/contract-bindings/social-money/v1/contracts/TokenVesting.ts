/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TokenVestingInterface extends utils.Interface {
  functions: {
    "release(address)": FunctionFragment;
    "WEEKS_IN_SECONDS()": FunctionFragment;
    "vestedAmount(address)": FunctionFragment;
    "releaseableAmount(address)": FunctionFragment;
    "addToken(address,address,uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "parseAddr(bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestingInfo(address)": FunctionFragment;
    "getVestingInfo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "release"
      | "WEEKS_IN_SECONDS"
      | "vestedAmount"
      | "releaseableAmount"
      | "addToken"
      | "getOwner"
      | "owner"
      | "parseAddr"
      | "transferOwnership"
      | "vestingInfo"
      | "getVestingInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "release",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "WEEKS_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseAddr",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEEKS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;

  events: {
    "Released(address,address,uint256)": EventFragment;
    "LogTokenAdded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ReleasedEventObject {
  token: string;
  vestingBeneficiary: string;
  amount: BigNumber;
}
export type ReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  ReleasedEventObject
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export interface LogTokenAddedEventObject {
  token: string;
  vestingBeneficiary: string;
  vestingPeriodInWeeks: BigNumber;
}
export type LogTokenAddedEvent = TypedEvent<
  [string, string, BigNumber],
  LogTokenAddedEventObject
>;

export type LogTokenAddedEventFilter = TypedEventFilter<LogTokenAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    release(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    WEEKS_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addToken(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _vestingPeriodInWeeks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { parsed: string }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        releasedSupply: BigNumber;
        start: BigNumber;
        duration: BigNumber;
      }
    >;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber] & {
          vestingBeneficiary: string;
          releasedSupply: BigNumber;
          start: BigNumber;
          duration: BigNumber;
        }
      ]
    >;
  };

  release(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  WEEKS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  vestedAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  releaseableAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addToken(
    _token: PromiseOrValue<string>,
    _vestingBeneficiary: PromiseOrValue<string>,
    _vestingPeriodInWeeks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseAddr(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      releasedSupply: BigNumber;
      start: BigNumber;
      duration: BigNumber;
    }
  >;

  getVestingInfo(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      releasedSupply: BigNumber;
      start: BigNumber;
      duration: BigNumber;
    }
  >;

  callStatic: {
    release(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    WEEKS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _vestingPeriodInWeeks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        releasedSupply: BigNumber;
        start: BigNumber;
        duration: BigNumber;
      }
    >;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        releasedSupply: BigNumber;
        start: BigNumber;
        duration: BigNumber;
      }
    >;
  };

  filters: {
    "Released(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      amount?: null
    ): ReleasedEventFilter;
    Released(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      amount?: null
    ): ReleasedEventFilter;

    "LogTokenAdded(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      vestingPeriodInWeeks?: null
    ): LogTokenAddedEventFilter;
    LogTokenAdded(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      vestingPeriodInWeeks?: null
    ): LogTokenAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    release(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    WEEKS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _vestingPeriodInWeeks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    release(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    WEEKS_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _vestingPeriodInWeeks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
