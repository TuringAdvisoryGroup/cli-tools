/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "getIndexSymbol(string)": FunctionFragment;
    "rolodex(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getIndexSymbol" | "rolodex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getIndexSymbol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rolodex",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIndexSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rolodex", data: BytesLike): Result;

  events: {};
}

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getIndexSymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        decimals: number;
        totalSupply: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPercentage: number;
        vestingPeriodInWeeks: BigNumber;
        approved: boolean;
      }
    >;
  };

  getIndexSymbol(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rolodex(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      string,
      string,
      number,
      BigNumber,
      boolean
    ] & {
      token: string;
      name: string;
      symbol: string;
      decimals: number;
      totalSupply: BigNumber;
      proposer: string;
      vestingBeneficiary: string;
      initialPercentage: number;
      vestingPeriodInWeeks: BigNumber;
      approved: boolean;
    }
  >;

  callStatic: {
    getIndexSymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        boolean
      ] & {
        token: string;
        name: string;
        symbol: string;
        decimals: number;
        totalSupply: BigNumber;
        proposer: string;
        vestingBeneficiary: string;
        initialPercentage: number;
        vestingPeriodInWeeks: BigNumber;
        approved: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getIndexSymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getIndexSymbol(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rolodex(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
