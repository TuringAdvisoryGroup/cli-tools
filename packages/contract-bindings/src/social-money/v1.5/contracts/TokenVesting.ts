/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TokenVestingInterface extends utils.Interface {
  functions: {
    "DAYS_IN_SECONDS()": FunctionFragment;
    "addToken(address,address[3],uint256[3],uint256)": FunctionFragment;
    "beneficiaries(address,uint256)": FunctionFragment;
    "beneficiaryTokens(address,uint256)": FunctionFragment;
    "getAllTokensByBeneficiary(address)": FunctionFragment;
    "getVestingInfo(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "release(address,address)": FunctionFragment;
    "releaseAll(address)": FunctionFragment;
    "releaseableAmount(address)": FunctionFragment;
    "releaseableAmountByAddress(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSablier(address)": FunctionFragment;
    "setVestingAddress(address,address,address)": FunctionFragment;
    "setVestingReferral(address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestedAmount(address)": FunctionFragment;
    "vestingInfo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAYS_IN_SECONDS"
      | "addToken"
      | "beneficiaries"
      | "beneficiaryTokens"
      | "getAllTokensByBeneficiary"
      | "getVestingInfo"
      | "owner"
      | "release"
      | "releaseAll"
      | "releaseableAmount"
      | "releaseableAmountByAddress"
      | "renounceOwnership"
      | "setSablier"
      | "setVestingAddress"
      | "setVestingReferral"
      | "transferOwnership"
      | "vestedAmount"
      | "vestingInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DAYS_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokensByBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseableAmountByAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSablier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingReferral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingInfo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAYS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokensByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releaseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseableAmountByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSablier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVestingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfo",
    data: BytesLike
  ): Result;

  events: {
    "LogBeneficiaryUpdated(address,address)": EventFragment;
    "LogTokenAdded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBeneficiaryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
}

export interface LogBeneficiaryUpdatedEventObject {
  token: string;
  vestingBeneficiary: string;
}
export type LogBeneficiaryUpdatedEvent = TypedEvent<
  [string, string],
  LogBeneficiaryUpdatedEventObject
>;

export type LogBeneficiaryUpdatedEventFilter =
  TypedEventFilter<LogBeneficiaryUpdatedEvent>;

export interface LogTokenAddedEventObject {
  token: string;
  vestingBeneficiary: string;
  vestingPeriodInDays: BigNumber;
}
export type LogTokenAddedEvent = TypedEvent<
  [string, string, BigNumber],
  LogTokenAddedEventObject
>;

export type LogTokenAddedEventFilter = TypedEventFilter<LogTokenAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReleasedEventObject {
  token: string;
  vestingBeneficiary: string;
  amount: BigNumber;
}
export type ReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  ReleasedEventObject
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export interface TokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToken(
      _token: PromiseOrValue<string>,
      _beneficiaries: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _proportions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        proportion: BigNumber;
        streamId: BigNumber;
        remaining: BigNumber;
      }
    >;

    beneficiaryTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllTokensByBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          vestingBeneficiary: string;
          totalBalance: BigNumber;
          beneficiariesCount: BigNumber;
          start: BigNumber;
          stop: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseAll(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    releaseableAmountByAddress(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSablier(
      _sablier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingAddress(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _newVestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingReferral(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;
  };

  DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  addToken(
    _token: PromiseOrValue<string>,
    _beneficiaries: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _proportions: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beneficiaries(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      beneficiary: string;
      proportion: BigNumber;
      streamId: BigNumber;
      remaining: BigNumber;
    }
  >;

  beneficiaryTokens(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllTokensByBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVestingInfo(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      totalBalance: BigNumber;
      beneficiariesCount: BigNumber;
      start: BigNumber;
      stop: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    _token: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseAll(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseableAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  releaseableAmountByAddress(
    _token: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSablier(
    _sablier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingAddress(
    _vestingBeneficiary: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _newVestingBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingReferral(
    _vestingBeneficiary: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _vestingReferral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestedAmount(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vestingInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      vestingBeneficiary: string;
      totalBalance: BigNumber;
      beneficiariesCount: BigNumber;
      start: BigNumber;
      stop: BigNumber;
    }
  >;

  callStatic: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _beneficiaries: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _proportions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        proportion: BigNumber;
        streamId: BigNumber;
        remaining: BigNumber;
      }
    >;

    beneficiaryTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllTokensByBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    release(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseAll(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmountByAddress(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSablier(
      _sablier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingAddress(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _newVestingBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingReferral(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingBeneficiary: string;
        totalBalance: BigNumber;
        beneficiariesCount: BigNumber;
        start: BigNumber;
        stop: BigNumber;
      }
    >;
  };

  filters: {
    "LogBeneficiaryUpdated(address,address)"(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null
    ): LogBeneficiaryUpdatedEventFilter;
    LogBeneficiaryUpdated(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null
    ): LogBeneficiaryUpdatedEventFilter;

    "LogTokenAdded(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      vestingPeriodInDays?: null
    ): LogTokenAddedEventFilter;
    LogTokenAdded(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      vestingPeriodInDays?: null
    ): LogTokenAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Released(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      amount?: null
    ): ReleasedEventFilter;
    Released(
      token?: PromiseOrValue<string> | null,
      vestingBeneficiary?: null,
      amount?: null
    ): ReleasedEventFilter;
  };

  estimateGas: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _beneficiaries: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _proportions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTokensByBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseAll(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseableAmountByAddress(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSablier(
      _sablier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingAddress(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _newVestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingReferral(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _beneficiaries: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _proportions: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTokensByBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseAll(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseableAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseableAmountByAddress(
      _token: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSablier(
      _sablier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingAddress(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _newVestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingReferral(
      _vestingBeneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestedAmount(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
