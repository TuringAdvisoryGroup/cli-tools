/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StakingRegistryInterface extends utils.Interface {
  functions: {
    "assignOwnerToContract(address,address,address)": FunctionFragment;
    "authorisedCallers(address)": FunctionFragment;
    "contractCountPerOwner(address)": FunctionFragment;
    "contractToOwner(address)": FunctionFragment;
    "contractsCount()": FunctionFragment;
    "controller()": FunctionFragment;
    "getContracts()": FunctionFragment;
    "getContractsCount()": FunctionFragment;
    "getIndexArray(address[],address)": FunctionFragment;
    "indexToContract(uint256)": FunctionFragment;
    "ownerToContracts(address,uint256)": FunctionFragment;
    "setCaller(address,bool)": FunctionFragment;
    "setController(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignOwnerToContract"
      | "authorisedCallers"
      | "contractCountPerOwner"
      | "contractToOwner"
      | "contractsCount"
      | "controller"
      | "getContracts"
      | "getContractsCount"
      | "getIndexArray"
      | "indexToContract"
      | "ownerToContracts"
      | "setCaller"
      | "setController"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignOwnerToContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorisedCallers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractCountPerOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractToOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexArray",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "indexToContract",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCaller",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignOwnerToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorisedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCountPerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;

  events: {
    "CallerUpdated(address,bool)": EventFragment;
    "ControllerUpdated(address)": EventFragment;
    "NewStakingContractOwner(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingContractOwner"): EventFragment;
}

export interface CallerUpdatedEventObject {
  newCaller: string;
  newValue: boolean;
}
export type CallerUpdatedEvent = TypedEvent<
  [string, boolean],
  CallerUpdatedEventObject
>;

export type CallerUpdatedEventFilter = TypedEventFilter<CallerUpdatedEvent>;

export interface ControllerUpdatedEventObject {
  newController: string;
}
export type ControllerUpdatedEvent = TypedEvent<
  [string],
  ControllerUpdatedEventObject
>;

export type ControllerUpdatedEventFilter =
  TypedEventFilter<ControllerUpdatedEvent>;

export interface NewStakingContractOwnerEventObject {
  stakingContract: string;
  newOwner: string;
  previousOwner: string;
}
export type NewStakingContractOwnerEvent = TypedEvent<
  [string, string, string],
  NewStakingContractOwnerEventObject
>;

export type NewStakingContractOwnerEventFilter =
  TypedEventFilter<NewStakingContractOwnerEvent>;

export interface StakingRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignOwnerToContract(
      _stakingContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _previousOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorisedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractCountPerOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contractToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getContracts(overrides?: CallOverrides): Promise<[BigNumber, string[]]>;

    getContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndexArray(
      _array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    indexToContract(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerToContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setCaller(
      _caller: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assignOwnerToContract(
    _stakingContract: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _previousOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorisedCallers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractCountPerOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractToOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  contractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  getContracts(overrides?: CallOverrides): Promise<[BigNumber, string[]]>;

  getContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getIndexArray(
    _array: PromiseOrValue<string>[],
    value: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  indexToContract(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerToContracts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setCaller(
    _caller: PromiseOrValue<string>,
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    _newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assignOwnerToContract(
      _stakingContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _previousOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorisedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractCountPerOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    contractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    getContracts(overrides?: CallOverrides): Promise<[BigNumber, string[]]>;

    getContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexArray(
      _array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    indexToContract(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerToContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setCaller(
      _caller: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CallerUpdated(address,bool)"(
      newCaller?: PromiseOrValue<string> | null,
      newValue?: null
    ): CallerUpdatedEventFilter;
    CallerUpdated(
      newCaller?: PromiseOrValue<string> | null,
      newValue?: null
    ): CallerUpdatedEventFilter;

    "ControllerUpdated(address)"(
      newController?: PromiseOrValue<string> | null
    ): ControllerUpdatedEventFilter;
    ControllerUpdated(
      newController?: PromiseOrValue<string> | null
    ): ControllerUpdatedEventFilter;

    "NewStakingContractOwner(address,address,address)"(
      stakingContract?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null
    ): NewStakingContractOwnerEventFilter;
    NewStakingContractOwner(
      stakingContract?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null
    ): NewStakingContractOwnerEventFilter;
  };

  estimateGas: {
    assignOwnerToContract(
      _stakingContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _previousOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorisedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractCountPerOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexArray(
      _array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexToContract(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerToContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCaller(
      _caller: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignOwnerToContract(
      _stakingContract: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _previousOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorisedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractCountPerOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexArray(
      _array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexToContract(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerToContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCaller(
      _caller: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
