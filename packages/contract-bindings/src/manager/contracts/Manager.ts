/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ManagerInterface extends utils.Interface {
  functions: {
    "RegistryInstance()": FunctionFragment;
    "TokenFactoryInstance()": FunctionFragment;
    "approveProposal(bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "migrateManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "parseAddr(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPlatformWallet(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setTokenFactory(address)": FunctionFragment;
    "setTokenVesting(address)": FunctionFragment;
    "setVestingAddress(address,address)": FunctionFragment;
    "setVestingReferral(address,address)": FunctionFragment;
    "submitProposal(string,string,uint8,uint256,uint32,uint256,address,uint32)": FunctionFragment;
    "submitReferral(bytes32,address,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RegistryInstance"
      | "TokenFactoryInstance"
      | "approveProposal"
      | "initialize"
      | "initialized"
      | "migrateManager"
      | "owner"
      | "parseAddr"
      | "renounceOwnership"
      | "setPlatformWallet"
      | "setRegistry"
      | "setTokenFactory"
      | "setTokenVesting"
      | "setVestingAddress"
      | "setVestingReferral"
      | "submitProposal"
      | "submitReferral"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RegistryInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TokenFactoryInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseAddr",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenVesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingReferral",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReferral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "RegistryInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenFactoryInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogManagerMigrated(address)": EventFragment;
    "LogRegistryChanged(address,address)": EventFragment;
    "LogTokenFactoryChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogManagerMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRegistryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogManagerMigratedEventObject {
  newManager: string;
}
export type LogManagerMigratedEvent = TypedEvent<
  [string],
  LogManagerMigratedEventObject
>;

export type LogManagerMigratedEventFilter =
  TypedEventFilter<LogManagerMigratedEvent>;

export interface LogRegistryChangedEventObject {
  oldR: string;
  newR: string;
}
export type LogRegistryChangedEvent = TypedEvent<
  [string, string],
  LogRegistryChangedEventObject
>;

export type LogRegistryChangedEventFilter =
  TypedEventFilter<LogRegistryChangedEvent>;

export interface LogTokenFactoryChangedEventObject {
  oldTF: string;
  newTF: string;
}
export type LogTokenFactoryChangedEvent = TypedEvent<
  [string, string],
  LogTokenFactoryChangedEventObject
>;

export type LogTokenFactoryChangedEventFilter =
  TypedEventFilter<LogTokenFactoryChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Manager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RegistryInstance(overrides?: CallOverrides): Promise<[string]>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<[string]>;

    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _tokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    migrateManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { parsed: string }>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformWallet(
      _newPlatformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _newRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenFactory(
      _newTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenVesting(
      _newTokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingAddress(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingReferral(
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RegistryInstance(overrides?: CallOverrides): Promise<string>;

  TokenFactoryInstance(overrides?: CallOverrides): Promise<string>;

  approveProposal(
    _hashIndex: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: PromiseOrValue<string>,
    _tokenFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  migrateManager(
    _newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseAddr(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformWallet(
    _newPlatformWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _newRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenFactory(
    _newTokenFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenVesting(
    _newTokenVesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingAddress(
    _token: PromiseOrValue<string>,
    _vestingBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingReferral(
    _token: PromiseOrValue<string>,
    _vestingReferral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    _initialPercentage: PromiseOrValue<BigNumberish>,
    _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
    _vestingBeneficiary: PromiseOrValue<string>,
    _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitReferral(
    _hashIndex: PromiseOrValue<BytesLike>,
    _referral: PromiseOrValue<string>,
    _referralPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RegistryInstance(overrides?: CallOverrides): Promise<string>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<string>;

    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: PromiseOrValue<string>,
      _tokenFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    migrateManager(
      _newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPlatformWallet(
      _newPlatformWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      _newRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenFactory(
      _newTokenFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenVesting(
      _newTokenVesting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingAddress(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingReferral(
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogManagerMigrated(address)"(
      newManager?: PromiseOrValue<string> | null
    ): LogManagerMigratedEventFilter;
    LogManagerMigrated(
      newManager?: PromiseOrValue<string> | null
    ): LogManagerMigratedEventFilter;

    "LogRegistryChanged(address,address)"(
      oldR?: null,
      newR?: null
    ): LogRegistryChangedEventFilter;
    LogRegistryChanged(oldR?: null, newR?: null): LogRegistryChangedEventFilter;

    "LogTokenFactoryChanged(address,address)"(
      oldTF?: null,
      newTF?: null
    ): LogTokenFactoryChangedEventFilter;
    LogTokenFactoryChanged(
      oldTF?: null,
      newTF?: null
    ): LogTokenFactoryChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    RegistryInstance(overrides?: CallOverrides): Promise<BigNumber>;

    TokenFactoryInstance(overrides?: CallOverrides): Promise<BigNumber>;

    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      _tokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    migrateManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformWallet(
      _newPlatformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _newRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenFactory(
      _newTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenVesting(
      _newTokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingAddress(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingReferral(
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RegistryInstance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenFactoryInstance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveProposal(
      _hashIndex: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _tokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseAddr(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformWallet(
      _newPlatformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _newRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenFactory(
      _newTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenVesting(
      _newTokenVesting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingAddress(
      _token: PromiseOrValue<string>,
      _vestingBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingReferral(
      _token: PromiseOrValue<string>,
      _vestingReferral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _initialPercentage: PromiseOrValue<BigNumberish>,
      _vestingPeriodInDays: PromiseOrValue<BigNumberish>,
      _vestingBeneficiary: PromiseOrValue<string>,
      _initialPlatformPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitReferral(
      _hashIndex: PromiseOrValue<BytesLike>,
      _referral: PromiseOrValue<string>,
      _referralPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
