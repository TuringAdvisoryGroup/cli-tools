/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Withdrawal {
  export type OrderStruct = {
    signer: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    key: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    signer: string;
    to: string;
    token: string;
    amount: BigNumber;
    expiration: BigNumber;
    key: BigNumber;
  };

  export type SigStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SigStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface WithdrawalInterface extends utils.Interface {
  functions: {
    "withdrawal((address,address,address,uint256,uint256,uint256),(uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "withdrawal"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "withdrawal",
    values: [Withdrawal.OrderStruct, Withdrawal.SigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "withdrawal", data: BytesLike): Result;

  events: {
    "WithdrawalEvent(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WithdrawalEvent"): EventFragment;
}

export interface WithdrawalEventEventObject {
  signer: string;
  to: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawalEventEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawalEventEventObject
>;

export type WithdrawalEventEventFilter = TypedEventFilter<WithdrawalEventEvent>;

export interface Withdrawal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WithdrawalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    withdrawal(
      order: Withdrawal.OrderStruct,
      sig: Withdrawal.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  withdrawal(
    order: Withdrawal.OrderStruct,
    sig: Withdrawal.SigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    withdrawal(
      order: Withdrawal.OrderStruct,
      sig: Withdrawal.SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "WithdrawalEvent(address,address,address,uint256)"(
      signer?: null,
      to?: null,
      token?: null,
      amount?: null
    ): WithdrawalEventEventFilter;
    WithdrawalEvent(
      signer?: null,
      to?: null,
      token?: null,
      amount?: null
    ): WithdrawalEventEventFilter;
  };

  estimateGas: {
    withdrawal(
      order: Withdrawal.OrderStruct,
      sig: Withdrawal.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    withdrawal(
      order: Withdrawal.OrderStruct,
      sig: Withdrawal.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
