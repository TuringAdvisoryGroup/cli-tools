/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MembershipsTypes {
  export type AssetStruct = {
    token: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [string, number] & {
    token: string;
    assetType: number;
  };

  export type CreateMintingScheduleParamsStruct = {
    start: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    amountTotal: PromiseOrValue<BigNumberish>;
    lotToken: PromiseOrValue<string>[];
    lotSize: PromiseOrValue<BigNumberish>[];
    pricePerLot: PromiseOrValue<BigNumberish>;
    paymentAsset: MembershipsTypes.AssetStruct;
    rollFee: PromiseOrValue<BigNumberish>;
    referral: PromiseOrValue<string>;
    referralFee: PromiseOrValue<BigNumberish>;
    maxBuyPerWallet: PromiseOrValue<BigNumberish>;
  };

  export type CreateMintingScheduleParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string[],
    BigNumber[],
    BigNumber,
    MembershipsTypes.AssetStructOutput,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    start: BigNumber;
    duration: BigNumber;
    merkleRoot: string;
    amountTotal: BigNumber;
    lotToken: string[];
    lotSize: BigNumber[];
    pricePerLot: BigNumber;
    paymentAsset: MembershipsTypes.AssetStructOutput;
    rollFee: BigNumber;
    referral: string;
    referralFee: BigNumber;
    maxBuyPerWallet: BigNumber;
  };
}

export interface MembershipsInterface extends utils.Interface {
  functions: {
    "buy(bytes32,uint256)": FunctionFragment;
    "buyWithAllowlist(bytes32,uint256,bytes32[])": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "claimReferral(bytes32)": FunctionFragment;
    "claimRoll(bytes32)": FunctionFragment;
    "claimUnsoldTokens(bytes32)": FunctionFragment;
    "computeScheduleIdForAddressAndIndex(address,uint256,uint256)": FunctionFragment;
    "computeUnsoldLots(bytes32)": FunctionFragment;
    "createCampaign((uint256,uint256,bytes32,uint256,address[],uint256[],uint256,(address,uint8),uint256,address,uint256,uint256)[],string)": FunctionFragment;
    "doTransfer(uint8,address,address,address,uint256)": FunctionFragment;
    "getMinRollFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "setAllowlist(bytes32,bytes32)": FunctionFragment;
    "setEternalStorageAddress(address)": FunctionFragment;
    "setMembershipsImplAddress(address)": FunctionFragment;
    "setMinRollFee(uint256)": FunctionFragment;
    "setRollWallet(address)": FunctionFragment;
    "setTokenAllow(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferScheduleOwner(bytes32,address)": FunctionFragment;
    "updateCampaignMetadata(bytes32,string)": FunctionFragment;
    "updateReferral(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "buyWithAllowlist"
      | "claim"
      | "claimReferral"
      | "claimRoll"
      | "claimUnsoldTokens"
      | "computeScheduleIdForAddressAndIndex"
      | "computeUnsoldLots"
      | "createCampaign"
      | "doTransfer"
      | "getMinRollFee"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "revoke"
      | "setAllowlist"
      | "setEternalStorageAddress"
      | "setMembershipsImplAddress"
      | "setMinRollFee"
      | "setRollWallet"
      | "setTokenAllow"
      | "transferOwnership"
      | "transferScheduleOwner"
      | "updateCampaignMetadata"
      | "updateReferral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithAllowlist",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferral",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoll",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnsoldTokens",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeUnsoldLots",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      MembershipsTypes.CreateMintingScheduleParamsStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doTransfer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinRollFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowlist",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEternalStorageAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipsImplAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRollFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRollWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllow",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferScheduleOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignMetadata",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferral",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeScheduleIdForAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeUnsoldLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinRollFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEternalStorageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipsImplAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRollFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRollWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferScheduleOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferral",
    data: BytesLike
  ): Result;

  events: {
    "EventEternalStorageUpdated(address,address)": EventFragment;
    "EventMembershipsImplUpdated(address,address)": EventFragment;
    "EventMinRollFeeUpdated(uint256)": EventFragment;
    "EventReferralUpdated(address,bytes32,address)": EventFragment;
    "EventRollWalletUpdated(address,address)": EventFragment;
    "EventScheduleCreated(address,bytes32)": EventFragment;
    "EventScheduleCreatedWithToken(address,bytes32,address)": EventFragment;
    "EventScheduleReferralSet(address,bytes32,address,uint256)": EventFragment;
    "EventTokenAllowedUpdated(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Revoked(bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventEternalStorageUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventMembershipsImplUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMinRollFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventReferralUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventRollWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventScheduleCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventScheduleCreatedWithToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventScheduleReferralSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventTokenAllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EventEternalStorageUpdatedEventObject {
  from: string;
  addr: string;
}
export type EventEternalStorageUpdatedEvent = TypedEvent<
  [string, string],
  EventEternalStorageUpdatedEventObject
>;

export type EventEternalStorageUpdatedEventFilter =
  TypedEventFilter<EventEternalStorageUpdatedEvent>;

export interface EventMembershipsImplUpdatedEventObject {
  from: string;
  addr: string;
}
export type EventMembershipsImplUpdatedEvent = TypedEvent<
  [string, string],
  EventMembershipsImplUpdatedEventObject
>;

export type EventMembershipsImplUpdatedEventFilter =
  TypedEventFilter<EventMembershipsImplUpdatedEvent>;

export interface EventMinRollFeeUpdatedEventObject {
  newMinRollFee: BigNumber;
}
export type EventMinRollFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  EventMinRollFeeUpdatedEventObject
>;

export type EventMinRollFeeUpdatedEventFilter =
  TypedEventFilter<EventMinRollFeeUpdatedEvent>;

export interface EventReferralUpdatedEventObject {
  from: string;
  scheduleId: string;
  newReferral: string;
}
export type EventReferralUpdatedEvent = TypedEvent<
  [string, string, string],
  EventReferralUpdatedEventObject
>;

export type EventReferralUpdatedEventFilter =
  TypedEventFilter<EventReferralUpdatedEvent>;

export interface EventRollWalletUpdatedEventObject {
  from: string;
  addr: string;
}
export type EventRollWalletUpdatedEvent = TypedEvent<
  [string, string],
  EventRollWalletUpdatedEventObject
>;

export type EventRollWalletUpdatedEventFilter =
  TypedEventFilter<EventRollWalletUpdatedEvent>;

export interface EventScheduleCreatedEventObject {
  from: string;
  scheduleId: string;
}
export type EventScheduleCreatedEvent = TypedEvent<
  [string, string],
  EventScheduleCreatedEventObject
>;

export type EventScheduleCreatedEventFilter =
  TypedEventFilter<EventScheduleCreatedEvent>;

export interface EventScheduleCreatedWithTokenEventObject {
  from: string;
  scheduleId: string;
  token: string;
}
export type EventScheduleCreatedWithTokenEvent = TypedEvent<
  [string, string, string],
  EventScheduleCreatedWithTokenEventObject
>;

export type EventScheduleCreatedWithTokenEventFilter =
  TypedEventFilter<EventScheduleCreatedWithTokenEvent>;

export interface EventScheduleReferralSetEventObject {
  sender: string;
  scheduleId: string;
  referral: string;
  referralFee: BigNumber;
}
export type EventScheduleReferralSetEvent = TypedEvent<
  [string, string, string, BigNumber],
  EventScheduleReferralSetEventObject
>;

export type EventScheduleReferralSetEventFilter =
  TypedEventFilter<EventScheduleReferralSetEvent>;

export interface EventTokenAllowedUpdatedEventObject {
  from: string;
  token: string;
  value: boolean;
}
export type EventTokenAllowedUpdatedEvent = TypedEvent<
  [string, string, boolean],
  EventTokenAllowedUpdatedEventObject
>;

export type EventTokenAllowedUpdatedEventFilter =
  TypedEventFilter<EventTokenAllowedUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RevokedEventObject {
  scheduleId: string;
}
export type RevokedEvent = TypedEvent<[string], RevokedEventObject>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Memberships extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MembershipsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyWithAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRoll(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimUnsoldTokens(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeUnsoldLots(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createCampaign(
      params: MembershipsTypes.CreateMintingScheduleParamsStruct[],
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doTransfer(
      assetType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMinRollFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEternalStorageAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembershipsImplAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinRollFee(
      newMinRollFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRollWallet(
      newRollWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAllow(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferScheduleOwner(
      scheduleId: PromiseOrValue<BytesLike>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    scheduleId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyWithAllowlist(
    scheduleId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReferral(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRoll(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimUnsoldTokens(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeScheduleIdForAddressAndIndex(
    holder: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  computeUnsoldLots(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createCampaign(
    params: MembershipsTypes.CreateMintingScheduleParamsStruct[],
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doTransfer(
    assetType: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowlist(
    scheduleId: PromiseOrValue<BytesLike>,
    root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEternalStorageAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembershipsImplAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinRollFee(
    newMinRollFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRollWallet(
    newRollWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAllow(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferScheduleOwner(
    scheduleId: PromiseOrValue<BytesLike>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCampaignMetadata(
    campaignId: PromiseOrValue<BytesLike>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReferral(
    scheduleId: PromiseOrValue<BytesLike>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRoll(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimUnsoldTokens(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    computeUnsoldLots(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      params: MembershipsTypes.CreateMintingScheduleParamsStruct[],
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    doTransfer(
      assetType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEternalStorageAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembershipsImplAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRollFee(
      newMinRollFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRollWallet(
      newRollWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllow(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferScheduleOwner(
      scheduleId: PromiseOrValue<BytesLike>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventEternalStorageUpdated(address,address)"(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventEternalStorageUpdatedEventFilter;
    EventEternalStorageUpdated(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventEternalStorageUpdatedEventFilter;

    "EventMembershipsImplUpdated(address,address)"(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventMembershipsImplUpdatedEventFilter;
    EventMembershipsImplUpdated(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventMembershipsImplUpdatedEventFilter;

    "EventMinRollFeeUpdated(uint256)"(
      newMinRollFee?: null
    ): EventMinRollFeeUpdatedEventFilter;
    EventMinRollFeeUpdated(
      newMinRollFee?: null
    ): EventMinRollFeeUpdatedEventFilter;

    "EventReferralUpdated(address,bytes32,address)"(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      newReferral?: PromiseOrValue<string> | null
    ): EventReferralUpdatedEventFilter;
    EventReferralUpdated(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      newReferral?: PromiseOrValue<string> | null
    ): EventReferralUpdatedEventFilter;

    "EventRollWalletUpdated(address,address)"(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventRollWalletUpdatedEventFilter;
    EventRollWalletUpdated(
      from?: PromiseOrValue<string> | null,
      addr?: PromiseOrValue<string> | null
    ): EventRollWalletUpdatedEventFilter;

    "EventScheduleCreated(address,bytes32)"(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null
    ): EventScheduleCreatedEventFilter;
    EventScheduleCreated(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null
    ): EventScheduleCreatedEventFilter;

    "EventScheduleCreatedWithToken(address,bytes32,address)"(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null
    ): EventScheduleCreatedWithTokenEventFilter;
    EventScheduleCreatedWithToken(
      from?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null
    ): EventScheduleCreatedWithTokenEventFilter;

    "EventScheduleReferralSet(address,bytes32,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      referral?: PromiseOrValue<string> | null,
      referralFee?: null
    ): EventScheduleReferralSetEventFilter;
    EventScheduleReferralSet(
      sender?: PromiseOrValue<string> | null,
      scheduleId?: PromiseOrValue<BytesLike> | null,
      referral?: PromiseOrValue<string> | null,
      referralFee?: null
    ): EventScheduleReferralSetEventFilter;

    "EventTokenAllowedUpdated(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): EventTokenAllowedUpdatedEventFilter;
    EventTokenAllowedUpdated(
      from?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): EventTokenAllowedUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Revoked(bytes32)"(
      scheduleId?: PromiseOrValue<BytesLike> | null
    ): RevokedEventFilter;
    Revoked(scheduleId?: PromiseOrValue<BytesLike> | null): RevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    buy(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyWithAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRoll(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimUnsoldTokens(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeUnsoldLots(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      params: MembershipsTypes.CreateMintingScheduleParamsStruct[],
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doTransfer(
      assetType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMinRollFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEternalStorageAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembershipsImplAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinRollFee(
      newMinRollFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRollWallet(
      newRollWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAllow(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferScheduleOwner(
      scheduleId: PromiseOrValue<BytesLike>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyWithAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRoll(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimUnsoldTokens(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeScheduleIdForAddressAndIndex(
      holder: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeUnsoldLots(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      params: MembershipsTypes.CreateMintingScheduleParamsStruct[],
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doTransfer(
      assetType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMinRollFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowlist(
      scheduleId: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEternalStorageAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembershipsImplAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinRollFee(
      newMinRollFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRollWallet(
      newRollWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAllow(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferScheduleOwner(
      scheduleId: PromiseOrValue<BytesLike>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReferral(
      scheduleId: PromiseOrValue<BytesLike>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
