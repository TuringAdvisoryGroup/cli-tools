/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MembershipsTypes {
  export type CampaignStruct = {
    campaignId: PromiseOrValue<BytesLike>;
    phases: PromiseOrValue<BytesLike>[];
    metadata: PromiseOrValue<string>;
  };

  export type CampaignStructOutput = [string, string[], string] & {
    campaignId: string;
    phases: string[];
    metadata: string;
  };

  export type ScheduleCampaignStruct = {
    campaignId: PromiseOrValue<BytesLike>;
    campaignIndex: PromiseOrValue<BigNumberish>;
    scheduleIndex: PromiseOrValue<BigNumberish>;
  };

  export type ScheduleCampaignStructOutput = [string, BigNumber, BigNumber] & {
    campaignId: string;
    campaignIndex: BigNumber;
    scheduleIndex: BigNumber;
  };

  export type ScheduleReferralStruct = {
    referral: PromiseOrValue<string>;
    referralFee: PromiseOrValue<BigNumberish>;
  };

  export type ScheduleReferralStructOutput = [string, BigNumber] & {
    referral: string;
    referralFee: BigNumber;
  };

  export type AssetStruct = {
    token: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [string, number] & {
    token: string;
    assetType: number;
  };

  export type MintingScheduleStruct = {
    initialized: PromiseOrValue<boolean>;
    revoked: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    merkleRoot: PromiseOrValue<BytesLike>;
    amountTotal: PromiseOrValue<BigNumberish>;
    released: PromiseOrValue<BigNumberish>;
    lotToken: PromiseOrValue<string>[];
    lotSize: PromiseOrValue<BigNumberish>[];
    paymentAsset: MembershipsTypes.AssetStruct;
    pricePerLot: PromiseOrValue<BigNumberish>;
    rollFee: PromiseOrValue<BigNumberish>;
    maxBuyPerWallet: PromiseOrValue<BigNumberish>;
  };

  export type MintingScheduleStructOutput = [
    boolean,
    boolean,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string[],
    BigNumber[],
    MembershipsTypes.AssetStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialized: boolean;
    revoked: boolean;
    owner: string;
    start: BigNumber;
    duration: BigNumber;
    merkleRoot: string;
    amountTotal: BigNumber;
    released: BigNumber;
    lotToken: string[];
    lotSize: BigNumber[];
    paymentAsset: MembershipsTypes.AssetStructOutput;
    pricePerLot: BigNumber;
    rollFee: BigNumber;
    maxBuyPerWallet: BigNumber;
  };
}

export interface MembershipsViewInterface extends utils.Interface {
  functions: {
    "getBuyPerWallet(bytes32,address)": FunctionFragment;
    "getBuyWalletCount(bytes32)": FunctionFragment;
    "getCampaign(uint256)": FunctionFragment;
    "getCampaignByOwner(address)": FunctionFragment;
    "getCampaignByReferral(address)": FunctionFragment;
    "getCampaignBySchedule(bytes32)": FunctionFragment;
    "getCampaignMetadata(bytes32)": FunctionFragment;
    "getCampaignsLength()": FunctionFragment;
    "getClaimed(bytes32,uint8)": FunctionFragment;
    "getReferral(bytes32)": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "getTokensAllowed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBuyPerWallet"
      | "getBuyWalletCount"
      | "getCampaign"
      | "getCampaignByOwner"
      | "getCampaignByReferral"
      | "getCampaignBySchedule"
      | "getCampaignMetadata"
      | "getCampaignsLength"
      | "getClaimed"
      | "getReferral"
      | "getSchedule"
      | "getTokensAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBuyPerWallet",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyWalletCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByReferral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignBySchedule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignMetadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensAllowed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBuyPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyWalletCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignBySchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensAllowed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MembershipsView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MembershipsViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBuyPerWallet(
      scheduleId: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyWalletCount(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCampaign(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MembershipsTypes.CampaignStructOutput]>;

    getCampaignByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

    getCampaignByReferral(
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

    getCampaignBySchedule(
      schedule: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MembershipsTypes.ScheduleCampaignStructOutput]>;

    getCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCampaignsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimed(
      scheduleID: PromiseOrValue<BytesLike>,
      userType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferral(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MembershipsTypes.ScheduleReferralStructOutput]>;

    getSchedule(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MembershipsTypes.MintingScheduleStructOutput]>;

    getTokensAllowed(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getBuyPerWallet(
    scheduleId: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyWalletCount(
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCampaign(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MembershipsTypes.CampaignStructOutput>;

  getCampaignByOwner(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

  getCampaignByReferral(
    referral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

  getCampaignBySchedule(
    schedule: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MembershipsTypes.ScheduleCampaignStructOutput>;

  getCampaignMetadata(
    campaignId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimed(
    scheduleID: PromiseOrValue<BytesLike>,
    userType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferral(
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MembershipsTypes.ScheduleReferralStructOutput>;

  getSchedule(
    scheduleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MembershipsTypes.MintingScheduleStructOutput>;

  getTokensAllowed(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getBuyPerWallet(
      scheduleId: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyWalletCount(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaign(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MembershipsTypes.CampaignStructOutput>;

    getCampaignByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

    getCampaignByReferral(
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, MembershipsTypes.CampaignStructOutput[]]>;

    getCampaignBySchedule(
      schedule: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MembershipsTypes.ScheduleCampaignStructOutput>;

    getCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimed(
      scheduleID: PromiseOrValue<BytesLike>,
      userType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MembershipsTypes.ScheduleReferralStructOutput>;

    getSchedule(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MembershipsTypes.MintingScheduleStructOutput>;

    getTokensAllowed(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getBuyPerWallet(
      scheduleId: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyWalletCount(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaign(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignByReferral(
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignBySchedule(
      schedule: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimed(
      scheduleID: PromiseOrValue<BytesLike>,
      userType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedule(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensAllowed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBuyPerWallet(
      scheduleId: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyWalletCount(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaign(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignByReferral(
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignBySchedule(
      schedule: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignMetadata(
      campaignId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimed(
      scheduleID: PromiseOrValue<BytesLike>,
      userType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferral(
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      scheduleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
